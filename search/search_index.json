{"config": {"lang": ["fr"], "separator": "[\\s\\-]+", "pipeline": ["stopWordFilter"]}, "docs": [{"location": "", "title": "Cours de Premi\u00e8re NSI", "text": ""}, {"location": "#programme-du-cours", "title": "Programme du cours", "text": "<ol> <li>Constructions \u00e9l\u00e9mentaires</li> <li>Bool\u00e9ens</li> <li>Fonctions</li> <li>Cha\u00eenes de caract\u00e8res</li> <li>Tableaux</li> <li>p-uplets et dictionnaires</li> <li>Tables de donn\u00e9es</li> <li>Flottants</li> <li>Algorithmes classiques</li> </ol>"}, {"location": "#logiciels-a-installer", "title": "Logiciels \u00e0 installer", "text": "<p>Installation d'Anaconda</p> <p>La suite Anaconda, t\u00e9l\u00e9chargeable ici, contient l'\u00e9diteur de carnets Jupyter et l'\u00e9diteur de code Spyder.</p> <p></p>"}, {"location": "algos_classiques/", "title": "Chapitre 9 : Algorithmes classiques", "text": "<p>Page en construction...</p> <p>Documents \u00e0 t\u00e9l\u00e9charger (\u00e9nonc\u00e9)</p> <p>Documents \u00e0 t\u00e9l\u00e9charger (corrig\u00e9)</p> <p>Page en construction...</p> <p></p>"}, {"location": "booleens/", "title": "Chapitre 2 : Bool\u00e9ens", "text": "<p>Page en construction...</p> <p>Documents \u00e0 t\u00e9l\u00e9charger (\u00e9nonc\u00e9)</p> <p>Documents \u00e0 t\u00e9l\u00e9charger (corrig\u00e9)</p> <p>Page en construction...</p> <p></p>"}, {"location": "chaines/", "title": "Chapitre 4 : Cha\u00eenes de caract\u00e8res", "text": "<p>Page en construction...</p> <p>Documents \u00e0 t\u00e9l\u00e9charger (\u00e9nonc\u00e9)</p> <p>Documents \u00e0 t\u00e9l\u00e9charger (corrig\u00e9)</p> <p>Page en construction...</p> <p></p>"}, {"location": "constr_elem/", "title": "Chapitre 1 : Constructions \u00e9l\u00e9mentaires", "text": "Activit\u00e9 1-01 : Prise en main de Jupyter <p>Objectifs :</p> <ul> <li>Ex\u00e9cuter des cellules de carnet Jupyter et d\u00e9couvrir les boutons les plus utiles.</li> <li>Faire la diff\u00e9rence entre une expression et une instruction.</li> <li>Installer un certain nombre de modules compl\u00e9mentaires qui seront utilis\u00e9s dans la suite du cours de NSI.</li> </ul> <p>Carnet Jupyter \u00e0 t\u00e9l\u00e9charger ici</p>"}, {"location": "constr_elem/#partie-a-variables-affectations-et-sequences-dinstructions", "title": "Partie A - Variables, affectations et s\u00e9quences d'instructions", "text": ""}, {"location": "constr_elem/#variables", "title": "Variables", "text": "<p>Une variable est une r\u00e9f\u00e9rence \u00e0 une zone de la m\u00e9moire de l'ordinateur dans laquelle est stock\u00e9e une valeur.</p> <p>Pour attribuer une valeur \u00e0 une variable ou pour modifier sa valeur, on r\u00e9alise une affectation.</p> <pre><code>x = 0\n</code></pre> <p>Une variable appel\u00e9e <code>x</code> a \u00e9t\u00e9 d\u00e9finie, et la valeur <code>0</code> a \u00e9t\u00e9 stock\u00e9e dans la variable gr\u00e2ce \u00e0 une affectation, not\u00e9e <code>=</code> en Python.</p> <p>Pour afficher \u00e0 l'\u00e9cran la valeur de la variable <code>x</code>, on utilise la fonction <code>print</code>.</p> <pre><code>print(x)\n</code></pre> <p>Attention aux noms de variables choisis</p> <p>Le nom d'une variable doit \u00eatre choisi de sorte que l'on comprenne rapidement le r\u00f4le de cette variable.</p> <p>Le nom peut contenir des lettres, des chiffres et certains caract\u00e8res sp\u00e9ciaux. Il doit commencer par une lettre minuscule.</p> <p>De plus, certains mots-cl\u00e9s du langage Python ne peuvent pas \u00eatre utilis\u00e9s comme nom de variable.</p>"}, {"location": "constr_elem/#sequences-dinstructions", "title": "S\u00e9quences d'instructions", "text": "<p>Le langage de programmation Python est un langage de programmation imp\u00e9rative. Cela signifie que les instructions sont ex\u00e9cut\u00e9es les unes apr\u00e8s les autres, dans l'ordre.</p> <p>Consid\u00e9rons par exemple la s\u00e9quence d'instructions suivante :</p> <pre><code>total = 0\nnote = 13\ntotal = total + note\nnote = 15\ntotal = total + note\nnote = 8\ntotal = total + note\nmoyenne = total / 3\n</code></pre> <ul> <li> <p>Ligne <code>1</code> : On d\u00e9finit une variable <code>total</code> en lui affectant la valeur <code>0</code>. Cette \u00e9tape s'appelle l'initialisation de la variable.</p> </li> <li> <p>Ligne <code>2</code> : On initialise une variable <code>note</code> en lui affectant la valeur <code>13</code>.</p> </li> <li> <p>Ligne <code>3</code> : On calcule d'abord la somme de la valeur de <code>total</code> (<code>0</code>) et de la valeur de <code>note</code> (<code>13</code>). On affecte ensuite le r\u00e9sultat (<code>13</code>) \u00e0 la variable <code>total</code>. L'ancienne valeur de <code>total</code> (<code>0</code>) est \u00e9cras\u00e9e par sa nouvelle valeur (<code>13</code>).</p> </li> <li> <p>Ligne <code>4</code> : Une nouvelle valeur est affect\u00e9e \u00e0 la variable <code>note</code>. L'ancienne valeur de <code>note</code> (<code>13</code>) est \u00e9cras\u00e9e par sa nouvelle valeur (<code>15</code>).</p> </li> <li> <p>Etc.</p> </li> </ul> Suivi de l'\u00e9volution de la valeur de variables <p>On peut repr\u00e9senter par un tableau les valeurs successives des variables au fur et \u00e0 mesure de l'ex\u00e9cution des lignes de code.</p> <p>Par exemple, pour le programme ci-dessus, voici le tableau obtenu :</p> Ligne <code>total</code> <code>note</code> <code>moyenne</code> Remarque 1 <code>0</code> La variable <code>total</code> est initialis\u00e9e. 2 <code>0</code> <code>13</code> La variable <code>`note</code> est initialis\u00e9e. 3 <code>13</code> <code>13</code> La valeur de <code>total</code> est \u00e9cras\u00e9e et remplac\u00e9e par une nouvelle valeur. 4 <code>13</code> <code>15</code> La valeur de <code>note</code> est \u00e9cras\u00e9e et remplac\u00e9e par une nouvelle valeur. 5 <code>28</code> <code>15</code> La valeur de <code>total</code> est \u00e9cras\u00e9e et remplac\u00e9e par une nouvelle valeur. 6 <code>28</code> <code>8</code> La valeur de <code>note</code> est \u00e9cras\u00e9e et remplac\u00e9e par une nouvelle valeur. 7 <code>36</code> <code>8</code> La valeur de <code>total</code> est \u00e9cras\u00e9e et remplac\u00e9e par une nouvelle valeur. 8 <code>36</code> <code>8</code> <code>12.0</code> La variable <code>moyenne</code> est initialis\u00e9e. Exercice 1-02 : Suivi de l'\u00e9volution de la valeur de variables <p>Objectif : \u00c0 l'aide d'un tableau de valeurs, suivre l'\u00e9volution de la valeur de plusieurs variables au cours de l'ex\u00e9cution d'une s\u00e9quence d'affectations.</p> <p>\u00c9nonc\u00e9</p> <p>1. Repr\u00e9senter sous forme de tableau les valeurs successives des variables lors de l'ex\u00e9cution de la s\u00e9quence d'instructions suivante :</p> <pre><code>a = 3\nb = 7\na = a + b\nb = a - b\na = a - b\n</code></pre> <p>2. Quel effet est produit par l'ex\u00e9cution des lignes <code>3</code> \u00e0 <code>5</code> ?</p>"}, {"location": "constr_elem/#tutor-magic", "title": "Tutor Magic", "text": "<p>Tutor Magic est un outil qui permet, dans un carnet Jupyter, de suivre pas \u00e0 pas la valeur des variables pendant l'ex\u00e9cution d'une s\u00e9quence d'instructions.</p> <p>Il faut commencer par charger Tutor Magic en ex\u00e9cutant la commande suivante dans une cellule du carnet :</p> <pre><code>%load_ext tutormagic\n</code></pre> <p>Il suffit ensuite d'ajouter la ligne suivante au dessus de la s\u00e9quence d'instructions \u00e0 \u00e9tudier :</p> <pre><code>%%tutor --lang python3 --heapPrimitives\n</code></pre> <p>Voici le r\u00e9sultat obtenu :</p> <p></p> Activit\u00e9 1-03 : Utilisation de Tutor Magic <p>Objectif : Utiliser l'outil Tutor Magic.</p> <p>Carnet Jupyter \u00e0 t\u00e9l\u00e9charger ici</p>"}, {"location": "constr_elem/#partie-b-conditions-et-boucles", "title": "Partie B - Conditions et boucles", "text": "<p>Comme tous les langages de programmation imp\u00e9ratifs, Python dispose d'un ensemble de structures qui permettent d'ex\u00e9cuter des instructions de mani\u00e8re r\u00e9p\u00e9t\u00e9e ou lorsqu'un certain test est r\u00e9ussi. </p>"}, {"location": "constr_elem/#instructions-conditionnelles", "title": "Instructions conditionnelles", "text": "<p>On utilise une condition, ou instruction conditionnelle, lorsque les instructions \u00e0 ex\u00e9cuter d\u00e9pendent du r\u00e9sultat (<code>Vrai</code> ou <code>Faux</code>) d'un certain test.</p> <p>Par exemple, si la valeur de la variable <code>moyenne</code> est strictement inf\u00e9rieure \u00e0 <code>10</code>, on souhaite afficher \u00e0 l'\u00e9cran le message <code>\"\u00c9chec\"</code>.</p> <pre><code>moyenne = 9.6\nif moyenne &lt; 10:\n    print(\"\u00c9chec\")\n</code></pre> <p>La condition est introduite par le mot-cl\u00e9 <code>if</code>, qui est directement suivi par le test \u00e0 effectuer. La ligne se termine par <code>:</code>.</p> <p>Le test consiste \u00e0 v\u00e9rifier si oui ou non la valeur de la variable <code>moyenne</code> est strictement inf\u00e9rieure \u00e0 <code>10</code>.</p> <ul> <li> <p>Dans le cas o\u00f9 c'est vrai (<code>True</code> en Python), on ex\u00e9cute l'instruction <code>print(\"\u00c9chec\")</code>, qui provoque l'affichage demand\u00e9 \u00e0 l'\u00e9cran.</p> </li> <li> <p>Dans le cas o\u00f9 c'est faux (<code>False</code> en Python), l'instruction <code>print(\"\u00c9chec\")</code> n'est pas ex\u00e9cut\u00e9e, et rien ne s'affiche \u00e0 l'\u00e9cran.</p> </li> </ul> <p>Attention \u00e0 la virgule math\u00e9matique en Python</p> <p>La virgule math\u00e9matique est not\u00e9e par un <code>.</code> en Python. C'est la notation anglo-saxonne.</p> <p>On souhaite d\u00e9sormais que, dans le cas o\u00f9 la valeur de <code>moyenne</code> est strictement inf\u00e9rieure \u00e0 <code>10</code>, le message \"\u00c9chec\" s'affiche \u00e0 l'\u00e9cran mais que, dans le cas contraire, le message \"Succ\u00e8s\" s'affiche.</p> <pre><code>moyenne = 9.6\nif moyenne &lt; 10:\n    print(\"\u00c9chec\")\nelse:\n    print(\"Succ\u00e8s\")\n</code></pre> <p>Le mot-cl\u00e9 <code>else</code>, suivi de <code>:</code>, permet d'indiquer quelles sont les instructions \u00e0 ex\u00e9cuter dans le cas o\u00f9 le test est faux.</p> <p>On peut remarquer que, dans les exemples pr\u00e9c\u00e9dents, les instructions <code>print(\"\u00c9chec\")</code> et <code>print(\"Succ\u00e8s\")</code> sont d\u00e9cal\u00e9es horizontalement de quatre espaces vers la droite. On parle d'indentation. C'est un concept fondamental du langage Python, qu'on ne retrouve pas dans la grande majorit\u00e9 des autres langages de programmation.</p> <p>L'indentation est utilis\u00e9e pour signaler pr\u00e9cisement le d\u00e9but et la fin des s\u00e9quences d'instructions qui doivent \u00eatre ex\u00e9cut\u00e9es.</p> <p>Op\u00e9rateurs de comparaison</p> <p>Pour l'\u00e9criture des tests, on aura r\u00e9guli\u00e8rement recours aux op\u00e9rateurs math\u00e9matiques de comparaison :</p> <ul> <li><code>==</code> est \u00e9gal \u00e0,</li> <li><code>!=</code> n'est pas \u00e9gal \u00e0,</li> <li><code>&lt;</code> est strictement inf\u00e9rieur \u00e0,</li> <li><code>&gt;</code> est strictement sup\u00e9rieur \u00e0,</li> <li><code>&lt;=</code> est inf\u00e9rieur ou \u00e9gal \u00e0,</li> <li><code>&gt;=</code> est sup\u00e9rieur ou \u00e9gal \u00e0.</li> </ul> Exercice 1-04 : Instructions conditionnelles <p>Objectif : \u00c9crire des instructions conditionnelles.</p> <p>Carnet Jupyter \u00e0 t\u00e9l\u00e9charger ici</p>"}, {"location": "constr_elem/#boucle-bornee-boucle-pour", "title": "Boucle born\u00e9e (boucle pour)", "text": "<p>Lorsque l'on souhaite ex\u00e9cuter plusieurs fois de suite une m\u00eame s\u00e9quence d'instructions, et que l'on connait a priori le nombre de r\u00e9p\u00e9titions souhait\u00e9es, on utilise une boucle born\u00e9e.</p> <p>Par exemple, si on ex\u00e9cute la s\u00e9quence d'instructions suivantes :</p> <pre><code>for nombre in range(10):\n    carre = nombre * nombre\n    cube = nombre * nombre * nombre\n    print(\"Le carr\u00e9 du nombre\", nombre, \"est\", carre, \"et son cube est\", cube)\nprint(\"Ex\u00e9cution termin\u00e9e\")\n</code></pre> <p>alors l'affichage obtenu est :</p> <pre><code>Le carr\u00e9 du nombre 0 est 0 et son cube est 0\nLe carr\u00e9 du nombre 1 est 1 et son cube est 1\nLe carr\u00e9 du nombre 2 est 4 et son cube est 8\nLe carr\u00e9 du nombre 3 est 9 et son cube est 27\nLe carr\u00e9 du nombre 4 est 16 et son cube est 64\nLe carr\u00e9 du nombre 5 est 25 et son cube est 125\nLe carr\u00e9 du nombre 6 est 36 et son cube est 216\nLe carr\u00e9 du nombre 7 est 49 et son cube est 343\nLe carr\u00e9 du nombre 8 est 64 et son cube est 512\nLe carr\u00e9 du nombre 9 est 81 et son cube est 729\nEx\u00e9cution termin\u00e9e\n</code></pre> <p>La boucle pour est introduite par le mot-cl\u00e9 <code>for</code> et la premi\u00e8re ligne se termine par <code>:</code>.</p> <p>Sur les lignes <code>2</code> \u00e0 <code>4</code> est \u00e9crite la s\u00e9quence d'instructions \u00e0 ex\u00e9cuter plusieurs fois. Elle est indent\u00e9e.</p> <p>La ligne <code>5</code>, qui n'est pas indent\u00e9e, ne fait pas partie de la s\u00e9quence d'instructions \u00e0 r\u00e9p\u00e9ter. Elle n'est donc ex\u00e9cut\u00e9e qu'une seule fois, apr\u00e8s la fin de la boucle pour.</p> Visualisation \u00e0 l'aide de Tutor Magic <p></p> <p>\u00c0 propos de l'expression <code>range(10)</code></p> <p>L'expression <code>range(10)</code> permet de pr\u00e9ciser qu'on souhaite dix r\u00e9p\u00e9titions, pour tous les entiers <code>nombre</code> allant de <code>0</code> \u00e0 <code>9</code>.</p> <p>Lorsque la s\u00e9quence d'instructions est ex\u00e9cut\u00e9e pour la premi\u00e8re fois, la variable <code>nombre</code> a pour valeur <code>0</code>.</p> <p>Ensuite, la m\u00eame s\u00e9quence d'instructions est ex\u00e9cut\u00e9e \u00e0 nouveau, mais cette fois la variable <code>nombre</code> a pour valeur <code>1</code>.</p> <p>La s\u00e9quence est ensuite ex\u00e9cut\u00e9e alors que la variable <code>nombre</code> a pour valeur <code>2</code>, puis <code>3</code>, puis <code>4</code>, etc. jusqu'\u00e0 <code>9</code>.</p> Exercice 1-05 : Diff\u00e9rentes utilisations de <code>range</code> <p>Objectif : Comprendre comment s'utilise <code>range</code> dans l'\u00e9criture d'une boucle pour.</p> <p>Carnet Jupyter \u00e0 t\u00e9l\u00e9charger ici</p> Exercice 1-06 : Boucles born\u00e9es <p>Objectif : \u00c9crire des boucles born\u00e9es.</p> <p>Carnet Jupyter \u00e0 t\u00e9l\u00e9charger ici</p>"}, {"location": "constr_elem/#boucle-non-bornee-boucle-tant-que", "title": "Boucle non born\u00e9e (boucle tant que)", "text": "<p>Lorsque l'on souhaite ex\u00e9cuter plusieurs fois de suite une m\u00eame s\u00e9quence d'instructions, et que l'on ne connait pas a priori le nombre de r\u00e9p\u00e9titions souhait\u00e9es, on utilise une boucle non born\u00e9e.</p> <p>Par exemple, si on ex\u00e9cute la s\u00e9quence d'instructions suivantes :</p> <pre><code>nombre = 1\nwhile nombre &lt; 2000000:\n    print(nombre)\n    nombre = nombre * 16\nprint(\"Ex\u00e9cution termin\u00e9e\")\n</code></pre> <p>alors l'affichage obtenu est :</p> <pre><code>1\n16\n256\n4096\n65536\n1048576\nEx\u00e9cution termin\u00e9e\n</code></pre> <p>La boucle tant que est introduite par le mot-cl\u00e9 <code>while</code>, suivi d'une condition qui doit \u00eatre vraie pour que la s\u00e9quence d'instructions s'ex\u00e9cute. La premi\u00e8re ligne se termine par <code>:</code>.</p> <p>Sur les lignes <code>2</code> et <code>3</code> est \u00e9crite la s\u00e9quence d'instructions \u00e0 ex\u00e9cuter plusieurs fois, et elle est indent\u00e9e.</p> <p>La ligne <code>4</code>, qui n'est pas indent\u00e9e, ne fait pas partie de la s\u00e9quence d'instructions \u00e0 r\u00e9p\u00e9ter. Elle n'est donc ex\u00e9cut\u00e9e qu'une seule fois, apr\u00e8s la fin de la boucle tant que.</p> Visualisation \u00e0 l'aide de Tutor Magic <p></p> <p>Attention aux boucles infinies</p> <p>Il faut s'assurer que la condition qui d\u00e9finit la boucle tant que devient fausse \u00e0 un moment donn\u00e9. Dans le cas contraire, on parle de boucle infinie, et le programme ne fonctionne pas car on ne sort jamais de la boucle.</p> <pre><code>nombre = 1\nwhile nombre != 0:  # ATTENTION : BOUCLE INFINIE !\n    nombre = nombre + 1\nprint(\"Ex\u00e9cution termin\u00e9e\")  # Cette ligne ne sera jamais ex\u00e9cut\u00e9e\n</code></pre> <p>La variable <code>nombre</code> est initialis\u00e9e \u00e0 <code>1</code> et elle augmente ensuite d'une unit\u00e9 lors de chaque passage dans la boucle. Elle ne sera donc jamais \u00e9gale \u00e0 <code>0</code> et la boucle ne s'arr\u00eatera donc jamais.</p> Exercice 1-07 : Boucles non born\u00e9es <p>Objectif : \u00c9crire des boucles non born\u00e9es.</p> <p>Carnet Jupyter \u00e0 t\u00e9l\u00e9charger ici</p>"}, {"location": "constr_elem/#partie-c-exercices-et-activites", "title": "Partie C - Exercices et activit\u00e9s", "text": "<p>Exercices 1-08 \u00e0 1-13</p> Exercice 1-08 : Plus grande valeurExercice 1-09 : Variables et bouclesExercice 1-10 : ???Exercice 1-11 : Lancers d'un d\u00e9Exercice 1-12 : Carr\u00e9s color\u00e9s (1)Exercice 1-13 : Carr\u00e9s color\u00e9s (2) <p>Carnet Jupyter \u00e0 t\u00e9l\u00e9charger ici</p> <p>Carnet Jupyter \u00e0 t\u00e9l\u00e9charger ici</p> <p>Carnet Jupyter \u00e0 t\u00e9l\u00e9charger ici</p> <p>Carnet Jupyter \u00e0 t\u00e9l\u00e9charger ici</p> <p>Carnet Jupyter \u00e0 t\u00e9l\u00e9charger ici</p> <p>Carnet Jupyter \u00e0 t\u00e9l\u00e9charger ici</p> <p>Activit\u00e9s 1-14 \u00e0 1-16</p> Activit\u00e9 1-14 : Le jeu du nombre myst\u00e8reActivit\u00e9 1-15 : Une variante du jeu du PenduActivit\u00e9 1-16 : Le jeu du Juste prix <p>Objectifs :</p> <ul> <li>Utiliser des instructions conditionnelles et des boucles.</li> <li>D\u00e9couvrir la fonction permettant de tirer al\u00e9atoirement un nombre entier.</li> <li>D\u00e9couvrir la fonction permettant de demander \u00e0 l'utilisateur de faire une saisie au clavier.</li> </ul> <p>Carnet Jupyter \u00e0 t\u00e9l\u00e9charger ici</p> <p>Objectif : Analyser un code et y rep\u00e9rer les variables, les affectations, les instructions conditionnelles et les boucles.</p> <p>Carnet Jupyter \u00e0 t\u00e9l\u00e9charger ici</p> <p>Objectif : Mettre en \u0153uvre de nombreuses notions : variables et affectations, instructions conditionnelles, boucles, tirage d'entiers al\u00e9atoires, affichages \u00e0 l'\u00e9cran, saisies au clavier.</p> <p>Carnet Jupyter \u00e0 t\u00e9l\u00e9charger ici</p>"}, {"location": "constr_elem/#ce-quil-faut-savoir-et-savoir-faire", "title": "Ce qu'il faut savoir et savoir faire", "text": "<ul> <li>Modifier et ex\u00e9cuter des cellules dans un carnet Jupyter.</li> <li>\u00c9crire une instruction conditionnelle.</li> <li>\u00c9crire une boucle born\u00e9e de la forme <code>for variable in range(nb_repetitions):</code>.</li> <li>\u00c9crire une boucle non born\u00e9e...</li> <li>... mais pas une boucle infinie.</li> <li>Utiliser correctement l'indentation pour d\u00e9finir les s\u00e9quences d'instructions.</li> <li>\u00catre capable de suivre la valeur d'une variable au cours de l'ex\u00e9cution d'une s\u00e9quence d'instructions, \u00e0 la main ou \u00e0 l'aide de Tutor Magic.</li> <li>Faire un affichage \u00e0 l'\u00e9cran avec la fonction <code>print</code>.</li> <li>Tirer un nombre entier au hasard avec la fonction <code>randint</code>.</li> <li>Demander \u00e0 l'utilisateur de saisir un entier au clavier avec la commande <code>int(input())</code>.</li> <li>Conna\u00eetre la diff\u00e9rence entre les expressions <code>range(a)</code>, <code>range(a, b)</code> et <code>range(a, b, c)</code>.</li> </ul>"}, {"location": "dictionnaires/", "title": "Chapitre 6 : p-uplets et dictionnaires", "text": "<p>Page en construction...</p> <p>Documents \u00e0 t\u00e9l\u00e9charger (\u00e9nonc\u00e9)</p> <p>Documents \u00e0 t\u00e9l\u00e9charger (corrig\u00e9)</p> <p>Page en construction...</p> <p></p>"}, {"location": "flottants/", "title": "Chapitre 8 : Flottants", "text": "<p>Page en construction...</p> <p>Documents \u00e0 t\u00e9l\u00e9charger (\u00e9nonc\u00e9)</p> <p>Documents \u00e0 t\u00e9l\u00e9charger (corrig\u00e9)</p> <p>Page en construction...</p> <p></p>"}, {"location": "fonctions/", "title": "Chapitre 3 : Fonctions", "text": "<p>Page en construction...</p> <p>Documents \u00e0 t\u00e9l\u00e9charger (\u00e9nonc\u00e9)</p> <p>Documents \u00e0 t\u00e9l\u00e9charger (corrig\u00e9)</p> <p>Page en construction...</p> <p></p>"}, {"location": "tableaux/", "title": "Chapitre 5 : Tableaux", "text": "<p>Page en construction...</p> <p>Documents \u00e0 t\u00e9l\u00e9charger (\u00e9nonc\u00e9)</p> <p>Documents \u00e0 t\u00e9l\u00e9charger (corrig\u00e9)</p> <p>Page en construction...</p> <p></p>"}, {"location": "tables/", "title": "Chapitre 7 : Tables de donn\u00e9es", "text": "<p>Page en construction...</p> <p>Documents \u00e0 t\u00e9l\u00e9charger (\u00e9nonc\u00e9)</p> <p>Documents \u00e0 t\u00e9l\u00e9charger (corrig\u00e9)</p> <p>Page en construction...</p> <p></p>"}]}